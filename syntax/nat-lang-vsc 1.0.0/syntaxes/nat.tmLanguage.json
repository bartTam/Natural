{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Natural",
	"scopeName": "source.natural",
	"repository": {
		"keywords": {
			"patterns": [
				{
					"comment": "Control Flow",
					"match": "\\b(if|else|while|for|return|break|loop|where|until|each)\\b",
					"name": "keyword.control.nat"
				},
				{
					"comment": "Other",
					"match": "\\b(has|of|from|with|is|in|to|try|catch|finally|except|object|idea|super|this|public|private)\\b",
					"name": "keyword.other.nat"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.nat",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.nat",
					"match": "\\\\."
				}
			]
		}
	},
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#operators"
		},
		{
			"comment": "Numeric Constants",
			"match": "\\b(\\d)+(\\.\\d)*",
			"name": "constant.numeric.nat"
		},
		{
			"comment": "Non Numeric Constants",
			"match": "\\b(false|true|null)\\b",
			"name": "constant.language.nat"
		},
		{
			"comment": "Basic Types",
			"match": "\\b(ref|const|int|float|bool)\\b",
			"name": "storage.type.numeric.nat"
		},
		{
			"comment": "Complex Types",
			"match": "\\b(array|list|tuple|queue|deque|stack|tree|hash_table|doublely_linked_list)\\b",
			"name": "storage.modifier.nat"
		},
		{
			"comment": "Built-in Functions",
			"match": "\\b(print)\\b",
			"name": "support.function.nat"
		},
		{
			"comment": "Operators",
			"match": "\\b(and|or|not|equals|less\\sthan|greater\\sthan)\\b",
			"name": "keyword.other.nat"
		},
		{
			"comment": "Symbol Operators",
			"match": "(!|\\+|-|\\/|\\*|%|\\+=|-=|\\/=|\\*=|%=|==|!=)",
			"name": "keyword.other.nat"
		},
		{
			"comment": "Object Definition Names: ie. object/idea name (from a, b, c)? is",
			"match": "(?<=(object\\s)|(idea\\s))[a-zA-Z_][a-zA-Z_\\d]*((\\s+from\\s+)([a-zA-Z_][a-zA-Z_\\d]*(,\\s+)?)*)?(?=\\s+is)",
			"name": "entity.name.type"
		},
		{
			"comment": "Function Definition Names",
			"match": "([a-zA-Z_][a-zA-Z_\\d\\(\\)]*\\s)+(?=is)",
			"name": "entity.name.function.nat"
		}
	]
}